/* tslint:disable */
/* eslint-disable */
/**
 * Vox
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecordingItem
 */
export interface RecordingItem {
    /**
     * 
     * @type {string}
     * @memberof RecordingItem
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingItem
     */
    recordingId: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingItem
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingItem
     */
    transcription: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingItem
     */
    failReason: string;
}

/**
 * Check if a given object implements the RecordingItem interface.
 */
export function instanceOfRecordingItem(value: object): value is RecordingItem {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('recordingId' in value) || value['recordingId'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('transcription' in value) || value['transcription'] === undefined) return false;
    if (!('failReason' in value) || value['failReason'] === undefined) return false;
    return true;
}

export function RecordingItemFromJSON(json: any): RecordingItem {
    return RecordingItemFromJSONTyped(json, false);
}

export function RecordingItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecordingItem {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'recordingId': json['recording_id'],
        'date': json['date'],
        'transcription': json['transcription'],
        'failReason': json['fail_reason'],
    };
}

export function RecordingItemToJSON(json: any): RecordingItem {
    return RecordingItemToJSONTyped(json, false);
}

export function RecordingItemToJSONTyped(value?: RecordingItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'recording_id': value['recordingId'],
        'date': value['date'],
        'transcription': value['transcription'],
        'fail_reason': value['failReason'],
    };
}

